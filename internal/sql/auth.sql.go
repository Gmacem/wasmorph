// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO wasmorph.api_keys (api_key, user_id, is_active)
VALUES ($1, $2, $3)
RETURNING id, api_key, user_id, created_at, is_active
`

type CreateAPIKeyParams struct {
	ApiKey   string      `json:"api_key"`
	UserID   int32       `json:"user_id"`
	IsActive pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (WasmorphApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.ApiKey, arg.UserID, arg.IsActive)
	var i WasmorphApiKey
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.UserID,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const createRule = `-- name: CreateRule :one
INSERT INTO wasmorph.rules (name, user_id, source_code, wasm_binary, is_active)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (name, user_id) 
DO UPDATE SET 
    source_code = EXCLUDED.source_code,
    wasm_binary = EXCLUDED.wasm_binary,
    updated_at = NOW(),
    is_active = EXCLUDED.is_active
RETURNING id, name, user_id, source_code, wasm_binary, created_at, updated_at, is_active
`

type CreateRuleParams struct {
	Name       string      `json:"name"`
	UserID     int32       `json:"user_id"`
	SourceCode string      `json:"source_code"`
	WasmBinary []byte      `json:"wasm_binary"`
	IsActive   pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateRule(ctx context.Context, arg CreateRuleParams) (WasmorphRule, error) {
	row := q.db.QueryRow(ctx, createRule,
		arg.Name,
		arg.UserID,
		arg.SourceCode,
		arg.WasmBinary,
		arg.IsActive,
	)
	var i WasmorphRule
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.SourceCode,
		&i.WasmBinary,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO wasmorph.users (username, email, password_hash, is_active)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password_hash, created_at, updated_at, is_active
`

type CreateUserParams struct {
	Username     string      `json:"username"`
	Email        pgtype.Text `json:"email"`
	PasswordHash string      `json:"password_hash"`
	IsActive     pgtype.Bool `json:"is_active"`
}

type CreateUserRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	Email        pgtype.Text      `json:"email"`
	PasswordHash string           `json:"password_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	IsActive     pgtype.Bool      `json:"is_active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.IsActive,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteRule = `-- name: DeleteRule :exec
UPDATE wasmorph.rules
SET is_active = false, updated_at = NOW()
WHERE name = $1 AND user_id = $2
`

type DeleteRuleParams struct {
	Name   string `json:"name"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) DeleteRule(ctx context.Context, arg DeleteRuleParams) error {
	_, err := q.db.Exec(ctx, deleteRule, arg.Name, arg.UserID)
	return err
}

const getRuleByNameAndUser = `-- name: GetRuleByNameAndUser :one
SELECT id, name, user_id, source_code, wasm_binary, created_at, updated_at, is_active
FROM wasmorph.rules
WHERE name = $1 AND user_id = $2 AND is_active = true
`

type GetRuleByNameAndUserParams struct {
	Name   string `json:"name"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) GetRuleByNameAndUser(ctx context.Context, arg GetRuleByNameAndUserParams) (WasmorphRule, error) {
	row := q.db.QueryRow(ctx, getRuleByNameAndUser, arg.Name, arg.UserID)
	var i WasmorphRule
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.SourceCode,
		&i.WasmBinary,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password_hash, email, created_at, updated_at, is_active 
FROM wasmorph.users 
WHERE email = $1 AND is_active = true
`

type GetUserByEmailRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Email        pgtype.Text      `json:"email"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	IsActive     pgtype.Bool      `json:"is_active"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, email, created_at, updated_at, is_active 
FROM wasmorph.users 
WHERE id = $1 AND is_active = true
`

type GetUserByIDRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Email        pgtype.Text      `json:"email"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	IsActive     pgtype.Bool      `json:"is_active"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, created_at, updated_at, is_active 
FROM wasmorph.users 
WHERE username = $1 AND is_active = true
`

type GetUserByUsernameRow struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	PasswordHash string           `json:"password_hash"`
	Email        pgtype.Text      `json:"email"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	IsActive     pgtype.Bool      `json:"is_active"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const listRulesByUser = `-- name: ListRulesByUser :many
SELECT id, name, user_id, created_at, updated_at, is_active
FROM wasmorph.rules
WHERE user_id = $1 AND is_active = true
ORDER BY created_at DESC
`

type ListRulesByUserRow struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	UserID    int32            `json:"user_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

func (q *Queries) ListRulesByUser(ctx context.Context, userID int32) ([]ListRulesByUserRow, error) {
	rows, err := q.db.Query(ctx, listRulesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRulesByUserRow{}
	for rows.Next() {
		var i ListRulesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRule = `-- name: UpdateRule :one
UPDATE wasmorph.rules
SET source_code = $3, wasm_binary = $4, updated_at = NOW()
WHERE name = $1 AND user_id = $2 AND is_active = true
RETURNING id, name, user_id, source_code, wasm_binary, created_at, updated_at, is_active
`

type UpdateRuleParams struct {
	Name       string `json:"name"`
	UserID     int32  `json:"user_id"`
	SourceCode string `json:"source_code"`
	WasmBinary []byte `json:"wasm_binary"`
}

func (q *Queries) UpdateRule(ctx context.Context, arg UpdateRuleParams) (WasmorphRule, error) {
	row := q.db.QueryRow(ctx, updateRule,
		arg.Name,
		arg.UserID,
		arg.SourceCode,
		arg.WasmBinary,
	)
	var i WasmorphRule
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.SourceCode,
		&i.WasmBinary,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const validateAPIKey = `-- name: ValidateAPIKey :one
SELECT user_id FROM wasmorph.api_keys 
WHERE api_key = $1 AND is_active = true
`

func (q *Queries) ValidateAPIKey(ctx context.Context, apiKey string) (int32, error) {
	row := q.db.QueryRow(ctx, validateAPIKey, apiKey)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}
